package com.wjk.greendaoexample.datamodel;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AREA".
*/
public class AreaDao extends AbstractDao<Area, String> {

    public static final String TABLENAME = "AREA";

    /**
     * Properties of entity Area.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AreaCode = new Property(0, String.class, "AreaCode", true, "AREA_CODE");
        public final static Property AreaName = new Property(1, String.class, "AreaName", false, "AREA_NAME");
    }


    public AreaDao(DaoConfig config) {
        super(config);
    }
    
    public AreaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AREA\" (" + //
                "\"AREA_CODE\" TEXT PRIMARY KEY NOT NULL ," + // 0: AreaCode
                "\"AREA_NAME\" TEXT);"); // 1: AreaName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AREA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Area entity) {
        stmt.clearBindings();
 
        String AreaCode = entity.getAreaCode();
        if (AreaCode != null) {
            stmt.bindString(1, AreaCode);
        }
 
        String AreaName = entity.getAreaName();
        if (AreaName != null) {
            stmt.bindString(2, AreaName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Area entity) {
        stmt.clearBindings();
 
        String AreaCode = entity.getAreaCode();
        if (AreaCode != null) {
            stmt.bindString(1, AreaCode);
        }
 
        String AreaName = entity.getAreaName();
        if (AreaName != null) {
            stmt.bindString(2, AreaName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Area readEntity(Cursor cursor, int offset) {
        Area entity = new Area( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // AreaCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // AreaName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Area entity, int offset) {
        entity.setAreaCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAreaName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Area entity, long rowId) {
        return entity.getAreaCode();
    }
    
    @Override
    public String getKey(Area entity) {
        if(entity != null) {
            return entity.getAreaCode();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Area entity) {
        return entity.getAreaCode() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
